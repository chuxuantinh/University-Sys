@model PaginationViewModel

@{
    /// Pagination View expects a 'currentPage' parameter
    /// and an optional 'searchTerm' parameter in controller
    var prevDisabled = Model.CurrentPage == 1 ? "disabled" : string.Empty;
    var nextDisabled = Model.CurrentPage == Model.TotalPages ? "disabled" : string.Empty;
}

@if (Model.TotalPages > 1)
{
    <nav aria-label="pagination">
        <p>Page @Model.CurrentPage of @Model.TotalPages</p>

        <ul class="pagination">
            <li class="page-item @prevDisabled">
                <a class="page-link" aria-disabled="@prevDisabled" aria-label="Previous" tabindex="-1"
                   asp-action="@Model.Action"
                   asp-route-searchTerm="@Model.SearchTerm"
                   asp-route-currentPage="@Model.PreviousPage"><span aria-hidden="true">&laquo;</span></a>
            </li>
            @for (int i = 1; i <= Model.TotalPages; i++)
            {
                var isCurrent = i == Model.CurrentPage;
                var active = isCurrent ? "active" : string.Empty;
                <li class="page-item @(active)">
                    @if (isCurrent)
                    {
                        <a class="page-link" aria-disabled="true">@i</a> <span class="sr-only">(current)</span>
                    }
                    else
                    {
                        <a class="page-link"
                           asp-action="@Model.Action"
                           asp-route-searchTerm="@Model.SearchTerm"
                           asp-route-currentPage="@i">@i</a>
                    }
                </li>
            }
            <li class="page-item @nextDisabled">
                <a class="page-link" aria-disabled="@nextDisabled" aria-label="Next" tabindex="-1"
                   asp-action="@Model.Action"
                   asp-route-searchTerm="@Model.SearchTerm"
                   asp-route-currentPage="@Model.NextPage"><span aria-hidden="true">&raquo;</span></a>
            </li>
        </ul>
    </nav>
}
